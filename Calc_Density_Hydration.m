clear all; close all;
addpath('./Data')
addpath('./Functions')
addpath('./Perple_X_Files')

%This code uses thermal models of the Alaskan flat-slab subduction region
%and Perple_x calculations relating to compositions contained within the
%region to calculate density H2O content.


%set grid spacing in meters%%%%
sp = 1000;


%%%%READ FIRST%%%%
%The following parameters can be changed and relate to our calculated model
%only (the lines plotted in green in the figure 2 that is generated by our
%code. This relates to figure 8 in our manuscript). The geometry of the
%layers used in our manuscript is shown in figure 3 of our manuscript. In
%this code you can change the thickness of the upper crust by changing
%parameter dhc. You can change the % weighted to the saturated model for
%basalt by changing phc. Similarly, you can change the thickness of the
%lower crust (gabbroic) layer and the % weighted to the saturated model by
%changing the values assigned to variables gct and phg. Variables dhm and
%phm control the thickness of the hydrated slab mantle layer and the %
%weighted to the saturated model. Choosing 0 for the phc, phg, of phm will
%weight the calculation 100% to the anhydrous model, creating a fully
%anhydrous slab. Choosing 100 for these same variables will weigh 100% to
%the saturated model, and calculating a fully saturated slab (within the
%hydrated layers). The entire slab has a thickness of 80 km, and any
%portion of the slab mantle below the hydrated slab mantle region will
%always be calculated as fully anhydrous (i.e. if you set dhm = 10000
%meters, hydration goes down to 10 km beneath the crust-mantle boundary (or
%30 km depth from the top of the slab), resulting in a 50-km thick
%underlying anhydrous layer included in the slab density calculations. The
%figures that are generated from this code include a cross section from
%350-850 km along the A-A' transect (Figure 1 in the manuscript) of density
%from the calculated model (figure 1), the calculated slab density for
%anhydrous, saturated, and calculated models (Figure 2), the wt% H2O in the
%slab across transect for anhydrous, saturated, and calculated models
%(Figure 3), the wt% H2O across transect contained just in the upper crust
%using the Yakutat basalt for saturated and calculated models (Figure 4),
%the wt% H2O across transect contained just in the hydrated slab mantle
%layer for saturated and calculated models (Figure 5), a cross section of
%wt% H2O for the calculated model (figure 6), and the wt % H2O across
%transect contained just in the gabbroic lower crust for the calculated
%model (figure 7). Note that Figures 2 and 3 show results using two
%different thermal modeling programs thermod8 and pgctherm2d (as explained in the manuscript), and
%two separate basalt compositions (Yakutat basalt and a MORB basalt).


%%%%You may change the values for the following 6 variables

%set depth of hydration in crust (dhc) in meters and % hydration in crust (phc) for this region%%%%
dhc = 5000;
phc = 35;

%set thickness of gabbro layer (gct) and % hydration (phg) for this region%%%%
gct = 15000; % gabbroic crust thickness m
phg = 25; % gabbroic crust percent hydration

%set depth of hydration in mantle in meters and % hydration for this region%%%%
dhm = 10000; 
phm = 20;


%% read in thermal modeling files

% read in x,y,t file pgc
DGrid = load('pgc_shear03_03252020.dat');
x_p = DGrid(:,2);
y_p = DGrid(:,3);
T_p = DGrid(:,4);

%read in x,y,t file thermod
DGrid = load('thermod_shear03_2km_03042020.txt');
x_t = DGrid(:,1)*1000;
y_t = DGrid(:,2)*1000;
T_t = DGrid(:,3);

%%%read in perpleX files and create tables to query%%%

%density 2D grid files for anhydrous 
OC_0 = readpdensity('basalt_0_h2o_yak_hp11ver_11092020_3.tab'); %oceanic crust dry yak
OC_0m = readpdensity('basalt_0_h2o_allmorb_11092020_3.tab'); %oceanic crust dry MORB
OMD = readpdensity('perid_DMM_0h2o_hp11ver_10282020_4.tab'); %oceanic mantle - use dry perid
CM = readpdensity('perid_DMM_0h2o_hp11ver_10282020_4.tab'); %mantle wedge - use dry perid
CC = readpdensity('contcrust_091219_4.tab'); %continental crust
%density 2D grid files for saturated 
OC_s = readpdensity('basalt_sat_yak_hp11ver_10302020_2.tab'); %oceanic crust yak sat
OC_sm = readpdensity('basalt_sat_allmorb_10302020_2.tab'); %oceanic crust MORB sat
OMW_s = readpdensity('perid_DMM_sat_hp11ver_10262020_4.tab'); %oceanic mantle
%density 2D grid files for gabbro
GC_s = readpdensity('gabbro_sat_11112020_2.tab'); %gabbroic crust saturated
GC_d = readpdensity('gabbro_0h2o_11112020_2.tab'); %gabbroic crust dry

%H2O 2D grid files for anhydrous
OC_0h = readpdensity('basalt_0_h2o_yak_hp11ver_11092020_4.tab'); %oceanic crust dry yak
OC_0hm = readpdensity('basalt_0_h2o_allmorb_11092020_4.tab'); %oceanic crust dry MORB
OMDh = readpdensity('perid_DMM_0h2o_hp11ver_10282020_5.tab'); %oceanic mantle - use dry perid
CMh = readpdensity('perid_DMM_0h2o_hp11ver_10282020_5.tab'); %mantle wedge - use dry perid
CCh = readpdensity('contcrust_091219_5.tab'); %continental crust
%H2O 2D grid files for saturated
OC_sh = readpdensity('basalt_sat_yak_hp11ver_10302020_3.tab'); %oceanic crust yak
OC_shm = readpdensity('basalt_sat_allmorb_10302020_3.tab'); %oceanic crust MORB
OMW_sh = readpdensity('perid_DMM_sat_hp11ver_10262020_5.tab'); %oceanic mantle
%density 2D grid files for gabbro
GC_sh = readpdensity('gabbro_sat_11112020_3.tab'); %gabbroic crust saturated
GC_dh = readpdensity('gabbro_0h2o_11112020_3.tab'); %gabbroic crust dry


%%%%%grid temperature %%%%%%%%%%%%%%
[Tx_p Ty_p Td_p] = gridpgdata([x_p y_p T_p],sp,1); %%%PGC grid
[Tx_t Ty_t Td_t] = gridpgdata([x_t y_t T_t],sp,1); %%%Thermod grid

% Read in geometry input file
layer = ["Slab_Mantle" "Slab_Crust" "Cont_Mantle" "Cont_Crust" "Air"];
[Geom] = read_geom('geometry3.txt',layer);


%%%Build and Fill Array%%%%%
[LName LNum] = fill_array(x_t,y_t,layer,Geom,sp);
[LNamep LNump] = fill_array(x_p,y_p,layer,Geom,sp);

%%%%Find and Relabel Hydrous Layers
[LName LNum layers] = fill_hydrous(x_t,y_t,layer,Geom,sp,LName,LNum,dhc,"Slab_Crust");
[LName LNum layers] = fill_hydrous(x_t,y_t,layers,Geom,sp,LName,LNum,dhm,"Slab_Mantle");
[LNamep LNump layer] = fill_hydrous(x_p,y_p,layer,Geom,sp,LNamep,LNump,dhc,"Slab_Crust");
[LNamep LNump layer] = fill_hydrous(x_p,y_p,layer,Geom,sp,LNamep,LNump,dhm,"Slab_Mantle");

%%%%Find and Relabel Gabbroic Layers
[LName LNum layers] = add_gabbro(x_t,y_t,layer,Geom,sp,LName,LNum,gct,"Slab_Crust");
[LNamep LNump layer] = add_gabbro(x_p,y_p,layer,Geom,sp,LNamep,LNump,gct,"Slab_Crust");

%%%%%grid layers %%%%%%%%%%%%%%
[Lx Ly Ln] = gridpgdata([x_t y_t LNum],sp,2);
[Lxp Lyp Lnp] = gridpgdata([x_p y_p LNump],sp,2);

%%%%Remove Undefined Layers from Temp Grids%%
i = isnan(Ln);
Td_t(i) = NaN;
i = isnan(Lnp);
Td_p(i) = NaN;

%%%%Build Pressure and Density Grids for anhydrous thermod yakutat%%%%
P_0t = nan(size(Td_t));
P_0tm = nan(size(Td_t));
P_st = nan(size(Td_t));
P_stm = nan(size(Td_t));
P_ct = nan(size(Td_t));
P_ctm = nan(size(Td_t));
rho_0t = nan(size(Td_t));
rho_0tm = nan(size(Td_t));
rho_st = nan(size(Td_t));
rho_stm = nan(size(Td_t));
rho_ct = nan(size(Td_t));
rho_ctm = nan(size(Td_t));
h2o_0t = nan(size(Td_t));
h2o_0tm = nan(size(Td_t));
h2o_st = nan(size(Td_t));
h2o_stm = nan(size(Td_t));
h2o_ct = nan(size(Td_t));
h2o_ctm = nan(size(Td_t));
rho_0t(1,:) = 2800; % set rho for ttemp+273.15opmost layer density calculation
rho_0tm(1,:) = 2800;
rho_st(1,:) = 2800;
rho_stm(1,:) = 2800;
rho_ct(1,:) = 2800;
rho_ctm(1,:) = 2800;
P_0t(1,:) = cumsum(rho_0t(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
P_0tm(1,:) = cumsum(rho_0tm(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
P_st(1,:) = cumsum(rho_st(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
P_stm(1,:) = cumsum(rho_stm(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
P_ct(1,:) = cumsum(rho_ct(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
P_ctm(1,:) = cumsum(rho_ctm(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
for i = 1:length(unique(Tx_t));
    for j = 2:length(unique(Ty_t));
        comp = Ln(j,i);
        temp = Td_t(j,i);
        press_0t = P_0t(j-1,i)/10^5;
        press_0tm = P_0tm(j-1,i)/10^5;
        press_st = P_st(j-1,i)/10^5;
        press_stm = P_stm(j-1,i)/10^5;
        press_ct = P_ct(j-1,i)/10^5;
        press_ctm = P_ctm(j-1,i)/10^5;
        if temp < 250 %%% sets minimum T to 250C so that grids work
            temp = 250;
        end
        if press_0t < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_0t = 1000;
        end
         if press_0tm < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_0tm = 1000;
        end
        if press_st < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_st = 1000;
        end
        if press_stm < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_stm = 1000;
        end
        if press_ct < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_ct = 1000;
        end
        if press_ctm < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_ctm = 1000;
        end
        if comp == 1; %dry slab mantle perid
            rho_0t(j,i) = OMD(temp+273.15,press_0t);
            rho_0tm(j,i) = OMD(temp+273.15,press_0tm);
            rho_st(j,i) = OMD(temp+273.15,press_st);
            rho_stm(j,i) = OMD(temp+273.15,press_stm);
            rho_ct(j,i) = OMD(temp+273.15,press_ct);
            rho_ctm(j,i) = OMD(temp+273.15,press_ctm);
            h2o_0t(j,i) = OMDh(temp+273.15,press_0t);
            h2o_0tm(j,i) = OMDh(temp+273.15,press_0tm);
            h2o_st(j,i) = OMDh(temp+273.15,press_st);
            h2o_stm(j,i) = OMDh(temp+273.15,press_stm);
            h2o_ct(j,i) = OMDh(temp+273.15,press_ct);
            h2o_ctm(j,i) = OMDh(temp+273.15,press_ctm);
        elseif comp == 2; %oceanic basalt dry only
            rho_0t(j,i) = OC_0(temp+273.15,press_0t);
            rho_0tm(j,i) = OC_0m(temp+273.15,press_0tm);
            rho_st(j,i) = OC_0(temp+273.15,press_st);
            rho_stm(j,i) = OC_0m(temp+273.15,press_stm);
            rho_ct(j,i) = OC_0(temp+273.15,press_ct);
            rho_ctm(j,i) = OC_0m(temp+273.15,press_ctm);
            h2o_0t(j,i) = OC_0h(temp+273.15,press_0t);
            h2o_0tm(j,i) = OC_0hm(temp+273.15,press_0tm);
            h2o_st(j,i) = OC_0h(temp+273.15,press_st);
            h2o_stm(j,i) = OC_0hm(temp+273.15,press_stm);
            h2o_ct(j,i) = OC_0h(temp+273.15,press_ct);
            h2o_ctm(j,i) = OC_0hm(temp+273.15,press_ctm);
        elseif comp == 3; %continental mantle (dry only)
            rho_0t(j,i) = CM(temp+273.15,press_0t);
            rho_0tm(j,i) = CM(temp+273.15,press_0tm);
            rho_st(j,i) = CM(temp+273.15,press_st);
            rho_stm(j,i) = CM(temp+273.15,press_stm);
            rho_ct(j,i) = CM(temp+273.15,press_ct);
            rho_ctm(j,i) = CM(temp+273.15,press_ctm);
            h2o_0t(j,i) = CMh(temp+273.15,press_0t);
            h2o_0tm(j,i) = CMh(temp+273.15,press_0tm);
            h2o_st(j,i) = CMh(temp+273.15,press_st);
            h2o_stm(j,i) = CMh(temp+273.15,press_stm);
            h2o_ct(j,i) = CMh(temp+273.15,press_ct);
            h2o_ctm(j,i) = CMh(temp+273.15,press_ctm);
        elseif comp == 4; %continental crust
            rho_0t(j,i) = CC(temp+273.15,press_0t);
            rho_0tm(j,i) = CC(temp+273.15,press_0tm);
            rho_st(j,i) = CC(temp+273.15,press_st);
            rho_stm(j,i) = CC(temp+273.15,press_stm);
            rho_ct(j,i) = CC(temp+273.15,press_ct);
            rho_ctm(j,i) = CC(temp+273.15,press_ctm);
            h2o_0t(j,i) = CCh(temp+273.15,press_0t);
            h2o_0tm(j,i) = CCh(temp+273.15,press_0tm);
            h2o_st(j,i) = CCh(temp+273.15,press_st);
            h2o_stm(j,i) = CCh(temp+273.15,press_stm);
            h2o_ct(j,i) = CCh(temp+273.15,press_ct);
            h2o_ctm(j,i) = CCh(temp+273.15,press_ctm);
        elseif comp == 5; %air
            rho_0t(j,i) = 0;
            rho_0tm(j,i) = 0;
            rho_st(j,i) = 0;
            rho_stm(j,i) = 0;
            rho_ct(j,i) = 0;
            rho_ctm(j,i) = 0;
            h2o_0t(j,i) = 0;
            h2o_0tm(j,i) = 0;
            h2o_st(j,i) = 0;
            h2o_stm(j,i) = 0;
            h2o_ct(j,i) = 0;
            h2o_ctm(j,i) = 0;
        elseif comp == 6; %oceanic basalt
            rho_0t(j,i) = OC_0(temp+273.15,press_0t);
            rho_st(j,i) = OC_s(temp+273.15,press_st);
            rho_ct(j,i) = OC_s(temp+273.15,press_ct)*phc/100+OC_0(temp+273.15,press_ct)*(1-(phc/100));
            h2o_0t(j,i) = OC_0h(temp+273.15,press_0t);
            h2o_st(j,i) = OC_sh(temp+273.15,press_st);
            h2o_ct(j,i) = OC_sh(temp+273.15,press_ct)*phc/100+OC_0h(temp+273.15,press_ct)*(1-(phc/100));
            rho_0tm(j,i) = OC_0m(temp+273.15,press_0tm);
            rho_stm(j,i) = OC_sm(temp+273.15,press_stm);
            rho_ctm(j,i) = OC_sm(temp+273.15,press_ctm)*phc/100+OC_0m(temp+273.15,press_ctm)*(1-(phc/100));
            h2o_0tm(j,i) = OC_0hm(temp+273.15,press_0tm);
            h2o_stm(j,i) = OC_shm(temp+273.15,press_stm);
            h2o_ctm(j,i) = OC_shm(temp+273.15,press_ctm)*phc/100+OC_0hm(temp+273.15,press_ctm)*(1-(phc/100));
        elseif comp == 7; %hydrated oceanic mantle
            rho_0t(j,i) = OMD(temp+273.15,press_0t);
            rho_st(j,i) = OMW_s(temp+273.15,press_st);
            rho_ct(j,i) = OMW_s(temp+273.15,press_ct)*phm/100+OMD(temp+273.15,press_ct)*(1-(phm/100));
            h2o_0t(j,i) = OMDh(temp+273.15,press_0t);
            h2o_st(j,i) = OMW_sh(temp+273.15,press_st);
            h2o_ct(j,i) = OMW_sh(temp+273.15,press_ct)*phm/100+OMDh(temp+273.15,press_ct)*(1-(phm/100));
            rho_0tm(j,i) = OMD(temp+273.15,press_0tm);
            rho_stm(j,i) = OMW_s(temp+273.15,press_stm);
            rho_ctm(j,i) = OMW_s(temp+273.15,press_ctm)*phm/100+OMD(temp+273.15,press_ctm)*(1-(phm/100));
            h2o_0tm(j,i) = OMDh(temp+273.15,press_0tm);
            h2o_stm(j,i) = OMW_sh(temp+273.15,press_stm);
            h2o_ctm(j,i) = OMW_sh(temp+273.15,press_ctm)*phm/100+OMDh(temp+273.15,press_ctm)*(1-(phm/100));
        elseif comp == 8; %oceanic gabbro
            rho_0t(j,i) = GC_d(temp+273.15,press_0t);
            rho_st(j,i) = GC_s(temp+273.15,press_st);
            rho_ct(j,i) = GC_s(temp+273.15,press_ct)*phg/100+GC_d(temp+273.15,press_ct)*(1-(phg/100));
            h2o_0t(j,i) = GC_dh(temp+273.15,press_0t);
            h2o_st(j,i) = GC_sh(temp+273.15,press_st);
            h2o_ct(j,i) = GC_sh(temp+273.15,press_ct)*phg/100+GC_dh(temp+273.15,press_ct)*(1-(phg/100));
            rho_0tm(j,i) = GC_d(temp+273.15,press_0tm);
            rho_stm(j,i) = GC_s(temp+273.15,press_stm);
            rho_ctm(j,i) = GC_s(temp+273.15,press_ctm)*phg/100+GC_d(temp+273.15,press_ctm)*(1-(phg/100));
            h2o_0tm(j,i) = GC_dh(temp+273.15,press_0tm);
            h2o_stm(j,i) = GC_sh(temp+273.15,press_stm);
            h2o_ctm(j,i) = GC_sh(temp+273.15,press_ctm)*phg/100+GC_dh(temp+273.15,press_ctm)*(1-(phg/100));
        end
        P_0t(j,i) = sum(rho_0t(1:j,i))*9.806*sp;
        P_st(j,i) = sum(rho_st(1:j,i))*9.806*sp;
        P_ct(j,i) = sum(rho_ct(1:j,i))*9.806*sp;
        P_0tm(j,i) = sum(rho_0tm(1:j,i))*9.806*sp;
        P_stm(j,i) = sum(rho_stm(1:j,i))*9.806*sp;
        P_ctm(j,i) = sum(rho_ctm(1:j,i))*9.806*sp;
    end
end

P_0t = P_0t/10^9; % convert to GPa
P_st = P_st/10^9; % convert to GPa
P_ct = P_ct/10^9; % convert to GPa
P_0tm = P_0tm/10^9; % convert to GPa
P_stm = P_stm/10^9; % convert to GPa
P_ctm = P_ctm/10^9; % convert to GPa
Lx = Lx/1000; Ly = Ly/1000; %convert to km
Tx_t = Tx_t/1000; Ty_t = Ty_t/1000; %convert to km

%Find slab density across transect
Ln2 = Lnp;
Ln2(202:271,:)=[];
slab_rho_0t = nan(size(Ln2));
slab_rho_st = nan(size(Ln2));
slab_rho_ct = nan(size(Ln2));
slab_rho_0tm = nan(size(Ln2));
slab_rho_stm = nan(size(Ln2));
slab_rho_ctm = nan(size(Ln2));

[ind1 ind2] = find(Ln2 == 1 | Ln2 ==6 | Ln2 == 7 | Ln2 == 8);

for i = 1:size(ind1);
    slab_rho_0t(ind1(i), ind2(i)) = rho_0t(ind1(i),ind2(i));
    slab_rho_st(ind1(i), ind2(i)) = rho_st(ind1(i),ind2(i));
    slab_rho_ct(ind1(i), ind2(i)) = rho_ct(ind1(i),ind2(i));
    slab_rho_0tm(ind1(i), ind2(i)) = rho_0tm(ind1(i),ind2(i));
    slab_rho_stm(ind1(i), ind2(i)) = rho_stm(ind1(i),ind2(i));
    slab_rho_ctm(ind1(i), ind2(i)) = rho_ctm(ind1(i),ind2(i));
end
    slab_rho_0t = (nanmean(slab_rho_0t,1))';
    slab_rho_st = (nanmean(slab_rho_st,1))';
    slab_rho_ct = (nanmean(slab_rho_ct,1))';
    slab_rho_0tm = (nanmean(slab_rho_0tm,1))';
    slab_rho_stm = (nanmean(slab_rho_stm,1))';
    slab_rho_ctm = (nanmean(slab_rho_ctm,1))';
    
    %%%%Find H2O across transect

slab_h2o_0t = nan(size(Ln2));
slab_h2o_st = nan(size(Ln2));
slab_h2o_ct = nan(size(Ln2));
slab_h2o_0tm = nan(size(Ln2));
slab_h2o_stm = nan(size(Ln2));
slab_h2o_ctm = nan(size(Ln2));
[ind1 ind2] = find(Ln2 == 1 | Ln2 ==6 | Ln2 == 7 | Ln2 == 8);
for i = 1:size(ind1);
    slab_h2o_0t(ind1(i), ind2(i)) = h2o_0t(ind1(i),ind2(i));
    slab_h2o_st(ind1(i), ind2(i)) = h2o_st(ind1(i),ind2(i));
    slab_h2o_ct(ind1(i), ind2(i)) = h2o_ct(ind1(i),ind2(i));
    slab_h2o_0tm(ind1(i), ind2(i)) = h2o_0tm(ind1(i),ind2(i));
    slab_h2o_stm(ind1(i), ind2(i)) = h2o_stm(ind1(i),ind2(i));
    slab_h2o_ctm(ind1(i), ind2(i)) = h2o_ctm(ind1(i),ind2(i));
end
    slab_h2o_0t = (nanmean(slab_h2o_0t,1))';
    slab_h2o_st = (nanmean(slab_h2o_st,1))';
    slab_h2o_ct = (nanmean(slab_h2o_ct,1))';   
    slab_h2o_0tm = (nanmean(slab_h2o_0tm,1))';
    slab_h2o_stm = (nanmean(slab_h2o_stm,1))';
    slab_h2o_ctm = (nanmean(slab_h2o_ctm,1))'; 

    %Find yak basalt only density and h2o with thermod
yakbas_rho_0t = nan(size(Ln));
yakbas_rho_st = nan(size(Ln));
yakbas_rho_ct = nan(size(Ln));
yakbas_h2o_0t = nan(size(Ln));
yakbas_h2o_st = nan(size(Ln));
yakbas_h2o_ct = nan(size(Ln));
    
[ind1 ind2] = find(Ln == 6);
for i = 1:size(ind1);
    yakbas_rho_0t(ind1(i), ind2(i)) = rho_0t(ind1(i),ind2(i));
    yakbas_rho_st(ind1(i), ind2(i)) = rho_st(ind1(i),ind2(i));
    yakbas_rho_ct(ind1(i), ind2(i)) = rho_ct(ind1(i),ind2(i));
    yakbas_h2o_0t(ind1(i), ind2(i)) = h2o_0t(ind1(i),ind2(i));
    yakbas_h2o_st(ind1(i), ind2(i)) = h2o_st(ind1(i),ind2(i));
    yakbas_h2o_ct(ind1(i), ind2(i)) = h2o_ct(ind1(i),ind2(i));
end
    yakbas_rho_0t = (nanmean(yakbas_rho_0t,1))';
    yakbas_rho_st = (nanmean(yakbas_rho_st,1))';
    yakbas_rho_ct = (nanmean(yakbas_rho_ct,1))';
    yakbas_h2o_0t = (nanmean(yakbas_h2o_0t,1))';
    yakbas_h2o_st = (nanmean(yakbas_h2o_st,1))';
    yakbas_h2o_ct = (nanmean(yakbas_h2o_ct,1))';

%Find hydrated slab mantle only density and h2o with thermod
hydperid_rho_0t = nan(size(Ln));
hydperid_rho_st = nan(size(Ln));
hydperid_rho_ct = nan(size(Ln));
hydperid_h2o_0t = nan(size(Ln));
hydperid_h2o_st = nan(size(Ln));
hydperid_h2o_ct = nan(size(Ln));
    
[ind1 ind2] = find(Ln == 7);
for i = 1:size(ind1);
    hydperid_rho_0t(ind1(i), ind2(i)) = rho_0t(ind1(i),ind2(i));
    hydperid_rho_st(ind1(i), ind2(i)) = rho_st(ind1(i),ind2(i));
    hydperid_rho_ct(ind1(i), ind2(i)) = rho_ct(ind1(i),ind2(i));
    hydperid_h2o_0t(ind1(i), ind2(i)) = h2o_0t(ind1(i),ind2(i));
    hydperid_h2o_st(ind1(i), ind2(i)) = h2o_st(ind1(i),ind2(i));
    hydperid_h2o_ct(ind1(i), ind2(i)) = h2o_ct(ind1(i),ind2(i));
end
    hydperid_rho_0t = (nanmean(hydperid_rho_0t,1))';
    hydperid_rho_st = (nanmean(hydperid_rho_st,1))';
    hydperid_rho_ct = (nanmean(hydperid_rho_ct,1))';
    hydperid_h2o_0t = (nanmean(hydperid_h2o_0t,1))';
    hydperid_h2o_st = (nanmean(hydperid_h2o_st,1))';
    hydperid_h2o_ct = (nanmean(hydperid_h2o_ct,1))';   
    
    %Find hydrated gabbroic crust only density and h2o with thermod
gabbro_rho_0t = nan(size(Ln));
gabbro_rho_st = nan(size(Ln));
gabbro_rho_ct = nan(size(Ln));
gabbro_h2o_0t = nan(size(Ln));
gabbro_h2o_st = nan(size(Ln));
gabbro_h2o_ct = nan(size(Ln));
    
[ind1 ind2] = find(Ln == 8);
for i = 1:size(ind1);
    gabbro_rho_0t(ind1(i), ind2(i)) = rho_0t(ind1(i),ind2(i));
    gabbro_rho_st(ind1(i), ind2(i)) = rho_st(ind1(i),ind2(i));
    gabbro_rho_ct(ind1(i), ind2(i)) = rho_ct(ind1(i),ind2(i));
    gabbro_h2o_0t(ind1(i), ind2(i)) = h2o_0t(ind1(i),ind2(i));
    gabbro_h2o_st(ind1(i), ind2(i)) = h2o_st(ind1(i),ind2(i));
    gabbro_h2o_ct(ind1(i), ind2(i)) = h2o_ct(ind1(i),ind2(i));
end
    gabbro_rho_0t = (nanmean(gabbro_rho_0t,1))';
    gabbro_rho_st = (nanmean(gabbro_rho_st,1))';
    gabbro_rho_ct = (nanmean(gabbro_rho_ct,1))';
    gabbro_h2o_0t = (nanmean(gabbro_h2o_0t,1))';
    gabbro_h2o_st = (nanmean(gabbro_h2o_st,1))';
    gabbro_h2o_ct = (nanmean(gabbro_h2o_ct,1))';   

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%And now everything again with pgc%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%Build Pressure and Density Grids for anhydrous yakutat pgc%%%%

P_0p = nan(size(Td_p));
P_sp = nan(size(Td_p));
P_cp = nan(size(Td_p));
P_0pm = nan(size(Td_p));
P_spm = nan(size(Td_p));
P_cpm = nan(size(Td_p));
rho_0p = nan(size(Td_p));
rho_sp = nan(size(Td_p));
rho_cp = nan(size(Td_p));
rho_0pm = nan(size(Td_p));
rho_spm = nan(size(Td_p));
rho_cpm = nan(size(Td_p));
h2o_0p = nan(size(Td_p));
h2o_sp = nan(size(Td_p));
h2o_cp = nan(size(Td_p));
h2o_0pm = nan(size(Td_p));
h2o_spm = nan(size(Td_p));
h2o_cpm = nan(size(Td_p));
rho_0p(1,:) = 2800; % set rho for ttemp+273.15opmost layer density calculation
rho_sp(1,:) = 2800;
rho_cp(1,:) = 2800;
rho_0pm(1,:) = 2800; % set rho for ttemp+273.15opmost layer density calculation
rho_spm(1,:) = 2800;
rho_cpm(1,:) = 2800;
P_0p(1,:) = cumsum(rho_0p(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
P_sp(1,:) = cumsum(rho_sp(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
P_cp(1,:) = cumsum(rho_cp(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
P_0pm(1,:) = cumsum(rho_0pm(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
P_spm(1,:) = cumsum(rho_spm(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation
P_cpm(1,:) = cumsum(rho_cpm(1,:)*9.806*sp,1); % set pressure for topmost layer density calculation

for i = 1:length(unique(Tx_p));
    for j = 2:length(unique(Ty_p));
        comp = Lnp(j,i);
        temp = Td_p(j,i);
        press_0p = P_0p(j-1,i)/10^5;
        press_sp = P_sp(j-1,i)/10^5;
        press_cp = P_cp(j-1,i)/10^5;
        press_0pm = P_0pm(j-1,i)/10^5;
        press_spm = P_spm(j-1,i)/10^5;
        press_cpm = P_cpm(j-1,i)/10^5;
        if temp < 27 %%% sets minimum T to 27C so that grids work
            temp = 27;
        end
        if press_0p < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_0p = 1000;
        end
        if press_sp < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_sp = 1000;
        end
        if press_cp < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_cp = 1000;
        end
        if press_0pm < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_0pm = 1000;
        end
        if press_spm < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_spm = 1000;
        end
        if press_cpm < 1000; %%% sets minimum P to 1000 bars so that grids work
            press_cpm = 1000;
        end
        if comp == 1; %dry mantle perid
            rho_0p(j,i) = OMD(temp+273.15,press_0p);
            rho_sp(j,i) = OMD(temp+273.15,press_sp);
            rho_cp(j,i) = OMD(temp+273.15,press_cp);
            h2o_0p(j,i) = OMDh(temp+273.15,press_0p);
            h2o_sp(j,i) = OMDh(temp+273.15,press_sp);
            h2o_cp(j,i) = OMDh(temp+273.15,press_cp);
            rho_0pm(j,i) = OMD(temp+273.15,press_0pm);
            rho_spm(j,i) = OMD(temp+273.15,press_spm);
            rho_cpm(j,i) = OMD(temp+273.15,press_cpm);
            h2o_0pm(j,i) = OMDh(temp+273.15,press_0pm);
            h2o_spm(j,i) = OMDh(temp+273.15,press_spm);
            h2o_cpm(j,i) = OMDh(temp+273.15,press_cpm);
        elseif comp == 2; %oceanic basalt dry only layer
            rho_0p(j,i) = OC_0(temp+273.15,press_0p);
            rho_sp(j,i) = OC_0(temp+273.15,press_sp);
            rho_cp(j,i) = OC_0(temp+273.15,press_cp);
            h2o_0p(j,i) = OC_0h(temp+273.15,press_0p);
            h2o_sp(j,i) = OC_0h(temp+273.15,press_sp);
            h2o_cp(j,i) = OC_0h(temp+273.15,press_cp);
            rho_0pm(j,i) = OC_0m(temp+273.15,press_0pm);
            rho_spm(j,i) = OC_0m(temp+273.15,press_spm);
            rho_cpm(j,i) = OC_0m(temp+273.15,press_cpm);
            h2o_0pm(j,i) = OC_0hm(temp+273.15,press_0pm);
            h2o_spm(j,i) = OC_0hm(temp+273.15,press_spm);
            h2o_cpm(j,i) = OC_0hm(temp+273.15,press_cpm);
        elseif comp == 3; %continental mantle, dry only
            rho_0p(j,i) = CM(temp+273.15,press_0p);
            rho_sp(j,i) = CM(temp+273.15,press_sp);
            rho_cp(j,i) = CM(temp+273.15,press_cp);
            h2o_0p(j,i) = CMh(temp+273.15,press_0p);
            h2o_sp(j,i) = CMh(temp+273.15,press_sp);
            h2o_cp(j,i) = CMh(temp+273.15,press_cp);
            rho_0pm(j,i) = CM(temp+273.15,press_0pm);
            rho_spm(j,i) = CM(temp+273.15,press_spm);
            rho_cpm(j,i) = CM(temp+273.15,press_cpm);
            h2o_0pm(j,i) = CMh(temp+273.15,press_0pm);
            h2o_spm(j,i) = CMh(temp+273.15,press_spm);
            h2o_cpm(j,i) = CMh(temp+273.15,press_cpm);
        elseif comp == 4; %continental crust
            rho_0p(j,i) = CC(temp+273.15,press_0p);
            rho_sp(j,i) = CC(temp+273.15,press_sp);
            rho_cp(j,i) = CC(temp+273.15,press_cp);
            h2o_0p(j,i) = CCh(temp+273.15,press_0p);
            h2o_sp(j,i) = CCh(temp+273.15,press_sp);
            h2o_cp(j,i) = CCh(temp+273.15,press_cp);
            rho_0pm(j,i) = CC(temp+273.15,press_0pm);
            rho_spm(j,i) = CC(temp+273.15,press_spm);
            rho_cpm(j,i) = CC(temp+273.15,press_cpm);
            h2o_0pm(j,i) = CCh(temp+273.15,press_0pm);
            h2o_spm(j,i) = CCh(temp+273.15,press_spm);
            h2o_cpm(j,i) = CCh(temp+273.15,press_cpm);
        elseif comp == 5; %air
            rho_0p(j,i) = 0;
            rho_sp(j,i) = 0;
            rho_cp(j,i) = 0;
            h2o_0p(j,i) = 0;
            h2o_sp(j,i) = 0;
            h2o_cp(j,i) = 0;
            rho_0pm(j,i) = 0;
            rho_spm(j,i) = 0;
            rho_cpm(j,i) = 0;
            h2o_0pm(j,i) = 0;
            h2o_spm(j,i) = 0;
            h2o_cpm(j,i) = 0;
        elseif comp == 6; %oceanic basalt
            rho_0p(j,i) = OC_0(temp+273.15,press_0p);
            rho_sp(j,i) = OC_s(temp+273.15,press_sp);
            rho_cp(j,i) = OC_s(temp+273.15,press_cp)*phc/100+OC_0(temp+273.15,press_cp)*(1-(phc/100));
            h2o_0p(j,i) = OC_0h(temp+273.15,press_0p);
            h2o_sp(j,i) = OC_sh(temp+273.15,press_sp);
            h2o_cp(j,i) = OC_sh(temp+273.15,press_cp)*phc/100+OC_0h(temp+273.15,press_cp)*(1-(phc/100));
            rho_0pm(j,i) = OC_0m(temp+273.15,press_0pm);
            rho_spm(j,i) = OC_sm(temp+273.15,press_spm);
            rho_cpm(j,i) = OC_sm(temp+273.15,press_cpm)*phc/100+OC_0m(temp+273.15,press_cpm)*(1-(phc/100));
            h2o_0pm(j,i) = OC_0hm(temp+273.15,press_0pm);
            h2o_spm(j,i) = OC_shm(temp+273.15,press_spm);
            h2o_cpm(j,i) = OC_shm(temp+273.15,press_cpm)*phc/100+OC_0hm(temp+273.15,press_cpm)*(1-(phc/100));
        elseif comp == 7; %oceanic mantle hydrated
            rho_0p(j,i) = OMD(temp+273.15,press_0p);
            rho_sp(j,i) = OMW_s(temp+273.15,press_sp);
            rho_cp(j,i) = OMW_s(temp+273.15,press_cp)*phm/100+OMD(temp+273.15,press_cp)*(1-(phm/100));
            h2o_0p(j,i) = OMDh(temp+273.15,press_0p);
            h2o_sp(j,i) = OMW_sh(temp+273.15,press_sp);
            h2o_cp(j,i) = OMW_sh(temp+273.15,press_cp)*phm/100+OMDh(temp+273.15,press_cp)*(1-(phm/100));
            rho_0pm(j,i) = OMD(temp+273.15,press_0pm);
            rho_spm(j,i) = OMW_s(temp+273.15,press_spm);
            rho_cpm(j,i) = OMW_s(temp+273.15,press_cpm)*phm/100+OMD(temp+273.15,press_cpm)*(1-(phm/100));
            h2o_0pm(j,i) = OMDh(temp+273.15,press_0pm);
            h2o_spm(j,i) = OMW_sh(temp+273.15,press_spm);
            h2o_cpm(j,i) = OMW_sh(temp+273.15,press_cpm)*phm/100+OMDh(temp+273.15,press_cpm)*(1-(phm/100));
        elseif comp == 8; %gabbro
            rho_0p(j,i) = GC_d(temp+273.15,press_0p);
            rho_sp(j,i) = GC_s(temp+273.15,press_sp);
            rho_cp(j,i) = GC_s(temp+273.15,press_cp)*phg/100+GC_d(temp+273.15,press_cp)*(1-(phg/100));
            h2o_0p(j,i) = GC_dh(temp+273.15,press_0p);
            h2o_sp(j,i) = GC_sh(temp+273.15,press_sp);
            h2o_cp(j,i) = GC_sh(temp+273.15,press_cp)*phg/100+GC_dh(temp+273.15,press_cp)*(1-(phg/100));
            rho_0pm(j,i) = GC_d(temp+273.15,press_0pm);
            rho_spm(j,i) = GC_s(temp+273.15,press_spm);
            rho_cpm(j,i) = GC_s(temp+273.15,press_cpm)*phg/100+GC_d(temp+273.15,press_cpm)*(1-(phg/100));
            h2o_0pm(j,i) = GC_dh(temp+273.15,press_0pm);
            h2o_spm(j,i) = GC_sh(temp+273.15,press_spm);
            h2o_cpm(j,i) = GC_sh(temp+273.15,press_cpm)*phg/100+GC_dh(temp+273.15,press_cpm)*(1-(phg/100));
        end
        P_0p(j,i) = sum(rho_0p(1:j,i))*9.806*sp;
        P_sp(j,i) = sum(rho_sp(1:j,i))*9.806*sp;
        P_cp(j,i) = sum(rho_cp(1:j,i))*9.806*sp;
        P_0pm(j,i) = sum(rho_0pm(1:j,i))*9.806*sp;
        P_spm(j,i) = sum(rho_spm(1:j,i))*9.806*sp;
        P_cpm(j,i) = sum(rho_cpm(1:j,i))*9.806*sp;
    end
end

P_0p = P_0p/10^9; % convert to GPa
P_sp = P_sp/10^9; % convert to GPa
P_cp = P_cp/10^9; % convert to GPa
P_0pm = P_0pm/10^9; % convert to GPa
P_spm = P_spm/10^9; % convert to GPa
P_cpm = P_cpm/10^9; % convert to GPa
Lxp = Lxp/1000; Lyp = Lyp/1000; %convert to km
Tx_p = Tx_p/1000; Ty_p = Ty_p/1000; %convert to km
%Find slab density across transect

slab_rho_0p = nan(size(Lnp));
slab_rho_sp = nan(size(Lnp));
slab_rho_cp = nan(size(Lnp));
slab_h2o_0p = nan(size(Lnp));
slab_h2o_sp = nan(size(Lnp));
slab_h2o_cp = nan(size(Lnp));
slab_rho_0pm = nan(size(Lnp));
slab_rho_spm = nan(size(Lnp));
slab_rho_cpm = nan(size(Lnp));
slab_h2o_0pm = nan(size(Lnp));
slab_h2o_spm = nan(size(Lnp));
slab_h2o_cpm = nan(size(Lnp));
[ind1 ind2] = find(Lnp == 1 | Lnp ==6 | Lnp == 7 | Lnp == 8);

for i = 1:size(ind1);
    slab_rho_0p(ind1(i), ind2(i)) = rho_0p(ind1(i),ind2(i));
    slab_rho_sp(ind1(i), ind2(i)) = rho_sp(ind1(i),ind2(i));
    slab_rho_cp(ind1(i), ind2(i)) = rho_cp(ind1(i),ind2(i));
    slab_h2o_0p(ind1(i), ind2(i)) = h2o_0p(ind1(i),ind2(i));
    slab_h2o_sp(ind1(i), ind2(i)) = h2o_sp(ind1(i),ind2(i));
    slab_h2o_cp(ind1(i), ind2(i)) = h2o_cp(ind1(i),ind2(i));
    slab_rho_0pm(ind1(i), ind2(i)) = rho_0pm(ind1(i),ind2(i));
    slab_rho_spm(ind1(i), ind2(i)) = rho_spm(ind1(i),ind2(i));
    slab_rho_cpm(ind1(i), ind2(i)) = rho_cpm(ind1(i),ind2(i));
    slab_h2o_0pm(ind1(i), ind2(i)) = h2o_0pm(ind1(i),ind2(i));
    slab_h2o_spm(ind1(i), ind2(i)) = h2o_spm(ind1(i),ind2(i));
    slab_h2o_cpm(ind1(i), ind2(i)) = h2o_cpm(ind1(i),ind2(i));
end
    slab_rho_0p = (nanmean(slab_rho_0p,1))';
    slab_rho_sp = (nanmean(slab_rho_sp,1))';
    slab_rho_cp = (nanmean(slab_rho_cp,1))';
    slab_h2o_0p = (nanmean(slab_h2o_0p,1))';
    slab_h2o_sp = (nanmean(slab_h2o_sp,1))';
    slab_h2o_cp = (nanmean(slab_h2o_cp,1))';
    slab_rho_0pm = (nanmean(slab_rho_0pm,1))';
    slab_rho_spm = (nanmean(slab_rho_spm,1))';
    slab_rho_cpm = (nanmean(slab_rho_cpm,1))';
    slab_h2o_0pm = (nanmean(slab_h2o_0pm,1))';
    slab_h2o_spm = (nanmean(slab_h2o_spm,1))';
    slab_h2o_cpm = (nanmean(slab_h2o_cpm,1))';
    


%%%%%%%%%%%%%%%%FIGURES********************

%%%%Figure 1 - density for calculated on cross section

name1 = char(layer(1));
name2 = char(layer(2));
name3 = char(layer(3));
name4 = char(layer(4));
pts1 = Geom.(name1)/1000;
pts2 = Geom.(name2)/1000;
pts3 = Geom.(name3)/1000;
pts4 = Geom.(name4)/1000;
z1 = 3650+zeros(length(pts1),1)
z2 = 3650+zeros(length(pts2),1)
z3 = 3650+zeros(length(pts3),1)
z4 = 3650+zeros(length(pts4),1)

figure('Renderer', 'painters', 'Position', [10 10 1500 900])
figure(1)
hold on
ax1 = gca;
surf(Tx_t,Ty_t,rho_ct,'EdgeColor','None');
h = pcolor(unique(Tx_t),flipud(unique(Ty_t)),rho_ct);
set(h,'EdgeColor','none');
set(ax1,'Ydir','normal')
hold on
h1 = plot3(pts1(:,2),pts1(:,3),z1,'k')
hold on
h2 = plot3(pts2(:,2),pts2(:,3),z2,'k')
hold on
h3 = plot3(pts3(:,2),pts3(:,3),z3,'k')
hold on
h4 = plot3(pts4(:,2),pts4(:,3),z4,'k')
caxis([2650 3650])
colorbar
title('Density (kg/m3)')
daspect([100 100 100])
axis('tight')
xlim([350 850])
ylim([-200 0])
xlabel('Distance (km)')
ylabel('Depth (km)')
set(ax1,'FontSize',40)



%%%%%% Figure 2 all models slab density plot
% %%%preparing for plot
x_values_thermod_i = unique(Tx_t);
x_val_thermod = x_values_thermod_i(240:700);
slab_rho_0t_cut = smooth(slab_rho_0t(240:700),50);
slab_rho_st_cut = smooth(slab_rho_st(240:700),50);
slab_rho_ct_cut = smooth(slab_rho_ct(240:700),50);
slab_rho_0p_cut = smooth(slab_rho_0p(240:700),50);
slab_rho_sp_cut = smooth(slab_rho_sp(240:700),50);
slab_rho_cp_cut = smooth(slab_rho_cp(240:700),50);
slab_rho_0tm_cut = smooth(slab_rho_0tm(240:700),50);
slab_rho_stm_cut = smooth(slab_rho_stm(240:700),50);
slab_rho_ctm_cut = smooth(slab_rho_ctm(240:700),50);
slab_rho_0pm_cut = smooth(slab_rho_0pm(240:700),50);
slab_rho_spm_cut = smooth(slab_rho_spm(240:700),50);
slab_rho_cpm_cut = smooth(slab_rho_cpm(240:700),50);
slab_h2o_0t_cut = smooth(slab_h2o_0t(240:700),50);
slab_h2o_st_cut = smooth(slab_h2o_st(240:700),50);
slab_h2o_ct_cut = smooth(slab_h2o_ct(240:700),50);
slab_h2o_0p_cut = smooth(slab_h2o_0p(240:700),50);
slab_h2o_sp_cut = smooth(slab_h2o_sp(240:700),50);
slab_h2o_cp_cut = smooth(slab_h2o_cp(240:700),50);

slab_h2o_0tm_cut = smooth(slab_h2o_0tm(240:700),50);
slab_h2o_stm_cut = smooth(slab_h2o_stm(240:700),50);
slab_h2o_ctm_cut = smooth(slab_h2o_ctm(240:700),50);
slab_h2o_0pm_cut = smooth(slab_h2o_0pm(240:700),50);
slab_h2o_spm_cut = smooth(slab_h2o_spm(240:700),50);
slab_h2o_cpm_cut = smooth(slab_h2o_cpm(240:700),50);

labels = ({'thermod yak anhydrous','thermod MORB anhydrous','pgc yak anhydrous','pgc MORB anhydrous','thermod yak saturated','thermod MORB saturated','pgc yak saturated','pgc MORB saturated','thermod yak calculated 1 wt% H2O','thermod MORB calculated 1 wt% H2O','pgc yak calculated 1 wt% H2O','pgc MORB 2.5 wt% H2O','mantle density'});
figure('Renderer', 'painters', 'Position', [10 10 1500 900])
figure(2)
ax2 = gca;
hold on
plot(x_val_thermod,slab_rho_0t_cut, 'm', 'LineWidth',4)
plot(x_val_thermod,slab_rho_0tm_cut, 'm','LineWidth',2)
plot(x_val_thermod,slab_rho_0p_cut, 'm:', 'LineWidth',4)
plot(x_val_thermod,slab_rho_0pm_cut, 'm:', 'LineWidth',2)
plot(x_val_thermod,slab_rho_st_cut, 'b', 'LineWidth',4)
plot(x_val_thermod,slab_rho_stm_cut, 'b', 'LineWidth',2)
plot(x_val_thermod,slab_rho_sp_cut, 'b:', 'LineWidth',4)
plot(x_val_thermod,slab_rho_spm_cut, 'b:', 'LineWidth',2)
plot(x_val_thermod,slab_rho_ct_cut, 'g', 'LineWidth',4)
plot(x_val_thermod,slab_rho_ctm_cut, 'g', 'LineWidth',2)
plot(x_val_thermod,slab_rho_cp_cut, 'g:', 'LineWidth',4)
plot(x_val_thermod,slab_rho_cpm_cut, 'g:', 'LineWidth',2)
title('Slab Density')
plot([min(min(x_val_thermod)) max(max(x_val_thermod))], [3300,3300], 'r--', 'LineWidth',4)
plot([min(min(x_val_thermod)) max(max(x_val_thermod))], [3350,3350], 'r--', 'LineWidth',4)
legend(labels, 'Location', 'southeast', 'Fontsize', 15)
xlabel('Distance (km)', 'HorizontalAlignment','right')
ylabel('Density (kg/m^3)')
axis('tight')
set(ax2,'FontSize',30)
xlim([350 700])


%%%%Figure 3 all models slab H2O% plot

labels2 = ({'thermod anhydrous yak','thermod anhydrous MORB','pgc anhydrous yak','pgc anhydrous MORB','thermod saturated yak','thermod saturated MORB','pgc saturated yak','pgc saturated MORB','thermod 30% hydration yak','thermod 30% hydration MORB','pgc 30% hydration yak','pgc 30% hydration MORB'});
figure('Renderer', 'painters', 'Position', [10 10 1500 900])
figure(3)
ax3 = gca;
hold on
plot(x_val_thermod,slab_h2o_0t_cut, 'm', 'LineWidth',4)
plot(x_val_thermod,slab_h2o_0tm_cut, 'm', 'LineWidth',2)
plot(x_val_thermod,slab_h2o_0p_cut, 'm:', 'LineWidth',4)
plot(x_val_thermod,slab_h2o_0pm_cut, 'm:', 'LineWidth',2)
plot(x_val_thermod,slab_h2o_st_cut, 'b', 'LineWidth',4)
plot(x_val_thermod,slab_h2o_stm_cut, 'b', 'LineWidth',2)
plot(x_val_thermod,slab_h2o_sp_cut, 'b:', 'LineWidth',4)
plot(x_val_thermod,slab_h2o_spm_cut, 'b:', 'LineWidth',2)
plot(x_val_thermod,slab_h2o_ct_cut, 'g', 'LineWidth',4)
plot(x_val_thermod,slab_h2o_ctm_cut, 'g', 'LineWidth',2)
plot(x_val_thermod,slab_h2o_cp_cut, 'g:', 'LineWidth',4)
plot(x_val_thermod,slab_h2o_cpm_cut, 'g:', 'LineWidth',2)
title('Slab H2O')
legend(labels2, 'Location', 'northwest', 'Fontsize', 10)
xlabel('Distance (km)', 'HorizontalAlignment','right')
ylabel('H2O%')
axis('tight')
set(ax3,'FontSize',30)
xlim([350 700])
%%%%Figure 4 calculated hydrated crust density and H2O wt%

x_val_thermod_yakbas = x_values_thermod_i(350:850);
yakbas_rho_0t_cut_i = smooth(yakbas_rho_0t,50);
yakbas_rho_0t_cut = yakbas_rho_0t_cut_i(350:850);
yakbas_rho_st_cut_i = smooth(yakbas_rho_st,50);
yakbas_rho_st_cut = yakbas_rho_st_cut_i(350:850);
yakbas_rho_ct_cut_i = smooth(yakbas_rho_ct,50);
yakbas_rho_ct_cut = yakbas_rho_ct_cut_i(350:850);
yakbas_h2o_0t_cut_i = smooth(yakbas_h2o_0t,50);
yakbas_h2o_0t_cut = yakbas_h2o_0t_cut_i(350:850);
yakbas_h2o_st_cut_i = smooth(yakbas_h2o_st,50);
yakbas_h2o_st_cut = yakbas_h2o_st_cut_i(350:850);
yakbas_h2o_ct_cut_i = smooth(yakbas_h2o_ct,50);
yakbas_h2o_ct_cut = yakbas_h2o_ct_cut_i(350:850);

yaklabels = ({'wt% H2O calc','wt% H2O sat','calc density kg/m^3','sat density kg/m^3'})
figure(4)
ax4 = gca;
hold on
yyaxis left
plot(x_val_thermod_yakbas,yakbas_h2o_ct_cut,'b','LineWidth',4)
hold on
plot(x_val_thermod_yakbas,yakbas_h2o_st_cut,'b:','LineWidth',4) 
ylim([0 6])
ylabel('wt% H2O')
hold on
yyaxis right
plot(x_val_thermod_yakbas,yakbas_rho_ct_cut,'r','LineWidth',4)
hold on
plot(x_val_thermod_yakbas,yakbas_rho_st_cut,'r:','LineWidth',4)
ylim([2650 3600])
legend(yaklabels, 'Location', 'southeast', 'Fontsize', 20)
xlabel('Distance (km)')
axis('tight')
set(ax4,'FontSize', 30)
title('yak basalt wt% H2O and density')
xlim([350 700])

%%Figure 5 calculated hydrated mantle density and H2O wt%
xmin_hydperid = 250;
xmax_hydperid = 700;
x_val_thermod_hydperid = x_values_thermod_i(xmin_hydperid:xmax_hydperid);
hydperid_rho_0t_cut_i = smooth(hydperid_rho_0t,50);
hydperid_rho_0t_cut = hydperid_rho_0t_cut_i(xmin_hydperid:xmax_hydperid);
hydperid_rho_st_cut_i = smooth(hydperid_rho_st,50);
hydperid_rho_st_cut = hydperid_rho_st_cut_i(xmin_hydperid:xmax_hydperid);
hydperid_rho_ct_cut_i = smooth(hydperid_rho_ct,50);
hydperid_rho_ct_cut = hydperid_rho_ct_cut_i(xmin_hydperid:xmax_hydperid);
hydperid_h2o_0t_cut_i = smooth(hydperid_h2o_0t,50);
hydperid_h2o_0t_cut = hydperid_h2o_0t_cut_i(xmin_hydperid:xmax_hydperid);
hydperid_h2o_st_cut_i = smooth(hydperid_h2o_st,50);
hydperid_h2o_st_cut = hydperid_h2o_st_cut_i(xmin_hydperid:xmax_hydperid);
hydperid_h2o_ct_cut_i = smooth(hydperid_h2o_ct,50);
hydperid_h2o_ct_cut = hydperid_h2o_ct_cut_i(xmin_hydperid:xmax_hydperid);

hydperidlabels = ({'wt% H2O calc','wt% H2O sat','calc density kg/m^3','sat density kg/m^3'})
figure(5)
ax5 = gca;
hold on
yyaxis left
plot(x_val_thermod_hydperid,hydperid_h2o_ct_cut,'b','LineWidth',4)
hold on
plot(x_val_thermod_hydperid,hydperid_h2o_st_cut,'b:','LineWidth',4) 
ylim([0 9])
ylabel('wt% H2O')
hold on
yyaxis right
plot(x_val_thermod_hydperid,hydperid_rho_ct_cut,'r','LineWidth',4)
hold on
plot(x_val_thermod_hydperid,hydperid_rho_st_cut,'r:','LineWidth',4)
ylim([2650 3600])
legend(hydperidlabels, 'Location', 'southeast', 'Fontsize', 20)
xlabel('Distance (km)')
axis('tight')
set(ax5,'FontSize', 30)
title('perid wt% H2O and density')

%%%Figure 6 - calculated model H2O% cross section
load('colorh2o.mat');
figure('Renderer', 'painters', 'Position', [10 10 1500 900])
figure(6)
hold on
ax6 = gca;
surf(Tx_t,Ty_t,h2o_ct,'EdgeColor','None');
hh = pcolor(unique(Tx_t),flipud(unique(Ty_t)),h2o_ct);
set(hh,'EdgeColor','none');
set(ax6,'Ydir','normal')
hold on
hh1 = plot3(pts1(:,2),pts1(:,3),z1,'k')
hold on
hh2 = plot3(pts2(:,2),pts2(:,3),z2,'k')
hold on
hh3 = plot3(pts3(:,2),pts3(:,3),z3,'k')
hold on
hh4 = plot3(pts4(:,2),pts4(:,3),z4,'k')
caxis([0 1.5])
colorbar
colormap(hydcolor)
title('H2O wt%')
daspect([100 100 100])
axis('tight')
xlim([350 850])
ylim([-200 0])
xlabel('Distance (km)')
ylabel('Depth (km)')
set(ax1,'FontSize',40)

%%Figure 7 calculated hydrated gabbro density and H2O wt%
xmin_gabbro = 250;
xmax_gabbro = 700;
x_val_thermod_gabbro = x_values_thermod_i(xmin_gabbro:xmax_gabbro);
gabbro_rho_0t_cut_i = smooth(gabbro_rho_0t,50);
gabbro_rho_0t_cut = gabbro_rho_0t_cut_i(xmin_gabbro:xmax_gabbro);
gabbro_rho_st_cut_i = smooth(gabbro_rho_st,50);
gabbro_rho_st_cut = gabbro_rho_st_cut_i(xmin_gabbro:xmax_gabbro);
gabbro_rho_ct_cut_i = smooth(gabbro_rho_ct,50);
gabbro_rho_ct_cut = gabbro_rho_ct_cut_i(xmin_gabbro:xmax_gabbro);
gabbro_h2o_0t_cut_i = smooth(hydperid_h2o_0t,50);
gabbro_h2o_0t_cut = gabbro_h2o_0t_cut_i(xmin_gabbro:xmax_gabbro);
gabbro_h2o_st_cut_i = smooth(gabbro_h2o_st,50);
gabbro_h2o_st_cut = gabbro_h2o_st_cut_i(xmin_gabbro:xmax_gabbro);
gabbro_h2o_ct_cut_i = smooth(gabbro_h2o_ct,50);
gabbro_h2o_ct_cut = gabbro_h2o_ct_cut_i(xmin_gabbro:xmax_gabbro);
gabbrolabels = ({'wt% H2O calc','wt% H2O sat','calc density kg/m^3','sat density kg/m^3' })
figure(7)
ax7 = gca;
hold on
yyaxis left
plot(x_val_thermod_gabbro,gabbro_h2o_ct_cut,'b','LineWidth',4)
hold on
plot(x_val_thermod_gabbro,gabbro_h2o_st_cut,'b:','LineWidth',4) 
ylim([0 6])
ylabel('wt% H2O')
hold on
yyaxis right
plot(x_val_thermod_gabbro,gabbro_rho_ct_cut,'g','LineWidth',4)
hold on
plot(x_val_thermod_gabbro,gabbro_rho_st_cut,'g:','LineWidth',4)
ylim([2650 3600])
legend(gabbrolabels, 'Location', 'northwest', 'Fontsize', 20)
xlabel('Distance (km)')
axis('tight')
set(ax7,'FontSize', 30)
title('gabbroic lower crust wt% H2O and density')


%%For calculating % reduction in density
%%what percent calculated thermod and yak bas of anhydrous
%wp = ((slab_rho_0t_cut-slab_rho_ct_cut)./slab_rho_0t_cut)*100
%%what percent calculated pgc and yak bas of anhydrous
%wp_cp = ((slab_rho_0p_cut-slab_rho_cp_cut)./slab_rho_0p_cut)*100
%%what percent calculated thermod, using morb basalt
%wp_mc = ((slab_rho_0tm_cut-slab_rho_ctm_cut)./slab_rho_0tm_cut)*100
%%what percent saturated thermod and yak bas compared with anhydrous
%wp_s = ((slab_rho_0t_cut-slab_rho_st_cut)./slab_rho_0t_cut)*100